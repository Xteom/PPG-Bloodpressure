# -*- coding: utf-8 -*-
"""MAX86177_20230801_235809.ppg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YHkelnCm78dRoLyK9XB5YHDSSakbXnZ4
"""

# prompt: access shared drive files

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import pandas as pd

# Read the file
df = pd.read_csv('/content/drive/MyDrive/00_GTCardio/recordings/MAX86177_20230801_235809.ppg.csv', header=32)

# Print the first five rows
print(df.head())

"""The CSV file has various parameters, the most important for PPG analysis is to take one of the PPG data streams, for example MEAS1_PPG1, an analze that signal."""

import matplotlib.pyplot as plt

# Plot the line plot
plt.plot(df['sampleNum'], df['MEAS1_PPG1'])
plt.title('MAX86177 MEAS1_PPG1')
plt.ylabel('MEAS1_PPG1')
plt.xlabel('Sample Number')

plt.xlim([4000, 4300])
plt.ylim([4750, 4870])
plt.show()

# Creat a line plot of MEAS1_PPG1 against the timestamp
plt.plot(df['timestamp'], df['MEAS1_PPG1'])
plt.title('MAX86177 MEAS1_PPG1')
plt.ylabel('MEAS1_PPG1')
plt.ylabel('Time')
#plt.xlim([1690927090028, 1690928000000])
plt.ylim([4700, 5200])

plt.show()

#TO DO
# Normalize the 'time_ms' column
df['normalized_time'] = df['timestamp'] - min_value


# Apply a high-pass filter to the PPG signal to remove slow-wave drift

# Waveform visualization

# Waveform analysis

# Look at PPG signal quality with vital_sql
# https://github.com/meta00/vital_sqi

# Normalize time values
# Define signal charcteristics (sample rate)

import pandas as pd

# Sample data
data = df['timestamp']
data.dtypes

# Create a DataFrame
df = pd.DataFrame(data)
df['timestamp'] = pd.to_numeric(df['timestamp'], downcast='float')

# Find the minimum value in the 'time_ms' column
min_value = df['timestamp'].min()

print(min_value)

df['normalized_time'] = df['timestamp']

df.head()

import pandas as pd

# Sample data with non-integer millisecond values
data = {'time_ms': [100.25, 200.5, 300.75, 400.0, 500.25]}

# Create a DataFrame
df = pd.DataFrame(data)

# Find the minimum value in the 'time_ms' column
min_value = df['time_ms'].min()

# Normalize the 'time_ms' column
df['normalized_time'] = df['time_ms'] - min_value

print(df)